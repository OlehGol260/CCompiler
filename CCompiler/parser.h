#pragma once

#include <vector>
#include <memory>

#include "lexeme_interface.h"
#include "context.h"

/*
	Generates a vector of statements out of lexems generated by Lexeme::Parse.
	main_context_ holds these statements which then passed to Translator and Evaluater
*/
class Parser
{
public:
	Parser() : main_context_(std::make_shared<Context>()) {}
	~Parser() = default;

	/*
		Getter for main_context_

		@return main_context_
	*/
	auto main_context() const noexcept { return main_context_; }

	/*
		State machine which parse the lexems after lexical analysis. The machine checks the 
		correctness of lexeme order, valid variable names etc.
		The machine form vector of lexems which than will be forwarded to ReservedWordParser or 
		StatementParser for statement generating

		@param lexems all lexems generated with Lexer
	*/
	void Parse(const std::vector<std::shared_ptr<LexemeInterface>>& lexems) const;

private:

	/*
		Check variable validity using special regular expression

		@param var_name string representation of variable name

		@return true if valid, false - otherwise
	*/
	static bool IsVariableValid(const std::string& var_name);
	
private:
	std::shared_ptr<Context> main_context_; /*!< holds all the root nodes of the original code*/
};
